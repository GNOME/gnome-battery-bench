From b3e9912626cd8032fdb7bc35ab66385c2dfe7d63 Mon Sep 17 00:00:00 2001
From: "Owen W. Taylor" <otaylor@fishsoup.net>
Date: Tue, 16 Dec 2014 15:17:20 -0500
Subject: [PATCH] Stuff

---
 src/TODO                    | 19 ++++++++---------
 src/application.c           | 51 ++++++++++++++++++++++++++++++++++-----------
 src/gnome-battery-bench.xml |  6 +++---
 src/system-state.c          | 20 +++++++-----------
 src/system-state.h          |  5 ++++-
 5 files changed, 62 insertions(+), 39 deletions(-)

diff --git a/src/TODO b/src/TODO
index 2e03047..aaba7ff 100644
--- a/src/TODO
+++ b/src/TODO
@@ -1,17 +1,16 @@
 update graphs on start
 graph isn't right for until-depletion
 show depletion line on percentage graph
-use individual labels in a better layout
-Handle charge
+Handle current instead of energy
 
+Read tests from directory
+Add idle test
+Add test prologue/epilogue
+Log test runs
+Show logs in UI
 
-     AC           online
-     Energy now   23.WH
 
-                  Design   Last Charge
-     Energy full   46.WH      45.WH
-     Percentage    53.2%      60%
-     Battery life  5:00h      4:30h
+  Standard - 10 minutes
+  Tuesday, December 5th
+  Power: 5WH    Estimated battery life: 5:32    Estimated battery life design: 7:31
 
-                 Instant    Average
-     Power         8W       7W
\ No newline at end of file
diff --git a/src/application.c b/src/application.c
index e0f26e5..31e23e8 100644
--- a/src/application.c
+++ b/src/application.c
@@ -25,8 +25,10 @@ struct _GbbApplication {
 
     GtkBuilder *builder;
     GtkWidget *window;
+    GtkWidget *headerbar;
     GtkWidget *test_combo;
     GtkWidget *duration_combo;
+    GtkWidget *backlight_combo;
     GtkWidget *start_button;
     GtkWidget *power_area;
     GtkWidget *percentage_area;
@@ -41,6 +43,8 @@ struct _GbbApplication {
         double percent;
     } duration;
 
+    int backlight_level;
+
     double max_power;
     double graph_max_power;
     double max_life;
@@ -99,13 +103,31 @@ update_labels(GbbApplication *application)
     set_label(application, "ac",
               "%s", state->online ? "online" : "offline");
 
+    char *title;
+    if (!application->started) {
+        title = g_strdup("GNOME Battery Bench");
+    } else if (application->started && !application->statistics) {
+        if (state->online)
+            title = g_strdup("GNOME Battery Bench - disconnect from AC to start");
+        else
+            title = g_strdup("GNOME Battery Bench - waiting for data");
+    } else {
+        int h, m, s;
+        break_time((state->time_us - application->start_state->time_us) / 1000000, &h, &m, &s);
+        title = g_strdup_printf("GNOME Battery Bench - running (%d:%02d:%02d)", h, m, s);
+    }
+
+    gtk_header_bar_set_title(GTK_HEADER_BAR(application->headerbar), title);
+    g_free(title);
+
+
     if (state->energy_now >= 0)
-        set_label(application, "energy-now", "%.1f", state->energy_now);
+        set_label(application, "energy-now", "%.1fWH", state->energy_now);
     else
         clear_label(application, "energy-now");
 
     if (state->energy_full >= 0)
-        set_label(application, "energy-full", "%.1f", state->energy_full);
+        set_label(application, "energy-full", "%.1fWH", state->energy_full);
     else
         clear_label(application, "energy-full");
 
@@ -115,15 +137,10 @@ update_labels(GbbApplication *application)
         clear_label(application, "percentage");
 
     if (state->energy_full_design >= 0)
-        set_label(application, "energy-full-design", "%.1f", state->energy_full_design);
+        set_label(application, "energy-full-design", "%.1fWH", state->energy_full_design);
     else
         clear_label(application, "energy-full-design");
 
-    if (state->energy_now >= 0 && state->energy_full >= 0)
-        set_label(application, "percentage", "%.1f%%", 100. * state->energy_now / state->energy_full);
-    else
-        clear_label(application, "percentage");
-
     if (state->energy_now >= 0 && state->energy_full_design >= 0)
         set_label(application, "percentage-design", "%.1f%%", 100. * state->energy_now / state->energy_full_design);
     else
@@ -325,6 +342,7 @@ on_start_button_clicked(GtkWidget      *button,
         g_object_set(G_OBJECT(application->start_button), "label", "Start", NULL);
         gtk_widget_set_sensitive(application->test_combo, TRUE);
         gtk_widget_set_sensitive(application->duration_combo, TRUE);
+        gtk_widget_set_sensitive(application->backlight_combo, TRUE);
     } else {
         if (application->history) {
             g_queue_free_full(application->history, (GFreeFunc)gbb_power_state_free);
@@ -341,12 +359,9 @@ on_start_button_clicked(GtkWidget      *button,
         application->max_power = 0;
         application->max_life = 0;
 
-        gbb_system_state_save(application->system_state);
-        gbb_system_state_set_default(application->system_state);
-        application->started = TRUE;
-
         gtk_widget_set_sensitive(application->test_combo, FALSE);
         gtk_widget_set_sensitive(application->duration_combo, FALSE);
+        gtk_widget_set_sensitive(application->backlight_combo, FALSE);
         g_object_set(G_OBJECT(application->start_button), "label", "Stop", NULL);
 
         const char *test_id = gtk_combo_box_get_active_id(GTK_COMBO_BOX(application->test_combo));
@@ -368,6 +383,15 @@ on_start_button_clicked(GtkWidget      *button,
             application->duration_type = DURATION_PERCENT;
             application->duration.percent = 5;
         }
+
+        const char *backlight_id = gtk_combo_box_get_active_id(GTK_COMBO_BOX(application->backlight_combo));
+        application->backlight_level = atoi(backlight_id);
+        gbb_system_state_save(application->system_state);
+        gbb_system_state_set_brightnesses(application->system_state,
+                                          application->backlight_level,
+                                          0);
+        application->started = TRUE;
+
     }
 
     update_labels(application);
@@ -517,8 +541,11 @@ gbb_application_activate (GApplication *app)
     application->window = GTK_WIDGET(gtk_builder_get_object(application->builder, "window"));
     gtk_application_add_window(GTK_APPLICATION(app), GTK_WINDOW(application->window));
 
+    application->headerbar = GTK_WIDGET(gtk_builder_get_object(application->builder, "headerbar"));
+
     application->test_combo = GTK_WIDGET(gtk_builder_get_object(application->builder, "test-combo"));
     application->duration_combo = GTK_WIDGET(gtk_builder_get_object(application->builder, "duration-combo"));
+    application->backlight_combo = GTK_WIDGET(gtk_builder_get_object(application->builder, "backlight-combo"));
 
     application->start_button = GTK_WIDGET(gtk_builder_get_object(application->builder, "start-button"));
 
diff --git a/src/gnome-battery-bench.xml b/src/gnome-battery-bench.xml
index 1b2ebe5..457d5db 100644
--- a/src/gnome-battery-bench.xml
+++ b/src/gnome-battery-bench.xml
@@ -96,10 +96,10 @@
                   </packing>
                 </child>
                 <child>
-                  <object class="GtkComboBoxText" id="duration-combo1">
+                  <object class="GtkComboBoxText" id="backlight-combo">
                     <property name="visible">True</property>
                     <property name="can_focus">False</property>
-                    <property name="active_id">5</property>
+                    <property name="active_id">50</property>
                     <items>
                       <item id="5" translatable="yes">5%</item>
                       <item id="50" translatable="yes">50%</item>
@@ -677,7 +677,7 @@
       </object>
     </child>
     <child type="titlebar">
-      <object class="GtkHeaderBar" id="headerbar1">
+      <object class="GtkHeaderBar" id="headerbar">
         <property name="visible">True</property>
         <property name="can_focus">False</property>
         <property name="show_close_button">True</property>
diff --git a/src/system-state.c b/src/system-state.c
index 7565b96..d535972 100644
--- a/src/system-state.c
+++ b/src/system-state.c
@@ -216,10 +216,10 @@ gbb_system_state_save (GbbSystemState *system_state)
     g_variant_unref(variant);
 }
 
-static void
-set_brightnesses (GbbSystemState *system_state,
-                  int             screen_brightness,
-                  int             keyboard_brightness)
+void
+gbb_system_state_set_brightnesses (GbbSystemState *system_state,
+                                   int             screen_brightness,
+                                   int             keyboard_brightness)
 {
     set_int32_property(system_state->screen_proxy,
                        g_dbus_proxy_get_interface_name(system_state->screen_proxy),
@@ -230,15 +230,9 @@ set_brightnesses (GbbSystemState *system_state,
 }
 
 void
-gbb_system_state_set_default (GbbSystemState *system_state)
-{
-    set_brightnesses(system_state, 50, 0);
-}
-
-void
 gbb_system_state_restore (GbbSystemState *system_state)
 {
-    set_brightnesses(system_state,
-                     system_state->saved_screen_brightness,
-                     system_state->saved_keyboard_brightness);
+    gbb_system_state_set_brightnesses(system_state,
+                                      system_state->saved_screen_brightness,
+                                      system_state->saved_keyboard_brightness);
 }
diff --git a/src/system-state.h b/src/system-state.h
index d5e5b81..e24cfed 100644
--- a/src/system-state.h
+++ b/src/system-state.h
@@ -17,9 +17,12 @@ GbbSystemState *gbb_system_state_new(void);
 gboolean gbb_system_state_is_ready (GbbSystemState *system_state);
 
 void gbb_system_state_save        (GbbSystemState *system_state);
-void gbb_system_state_set_default (GbbSystemState *system_state);
 void gbb_system_state_restore     (GbbSystemState *system_state);
 
+void gbb_system_state_set_brightnesses (GbbSystemState *system_state,
+                                        int             screen_brightness,
+                                        int             keyboard_brightness);
+
 GType gbb_system_state_get_type(void);
 
 #endif /* __SYSTEM_STATE_H__ */
-- 
2.1.0

